heat_template_version: 2015-04-30

description: |
  Sample heat template that spins up a 2 Tier App with 2 Web Servers and 1 DB server on private networks and attaches them to security
  groups and a Loadbalancer. Template is meant to be run on ubuntu for user-date to work properly.

parameters:

  external_network_id:
    type: string
    label: ext-net
    description: UUID of a Neutron external network
    default: 78f79268-2808-415b-b523-1db7fd3624c5

  db_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  web_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small

  dns:
    type: string
    label: DNS nameserver
    description: Comma separated list of DNS nameservers for the private network
    default: "8.8.8.8"

resources:
  # Create the db logical switch and configure DHCP.
  db_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: db-net
  db_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: db-subnet
      cidr: 172.16.30.0/24
      dns_nameservers: [ { get_param: dns } ]
      enable_dhcp: true
      gateway_ip: 172.16.30.1
      network_id: { get_resource: db_net }

  # Create the web logical switch and configure DHCP.
  web_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: web-net
  web_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: web-subnet
      cidr: 172.16.10.0/24
      dns_nameservers: [ { get_param: dns } ]
      enable_dhcp: true
      gateway_ip: 172.16.10.1
      network_id: { get_resource: web_net }
  # Create the router, add internal db interface, and add router uplink
  app_router_01:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      name: app-router-01
      value_specs: {router_type: exclusive}
      external_gateway_info: { "network": { get_param: external_network_id }}
  app_router_int0:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: app_router_01 }
      subnet_id: { get_resource: db_subnet }
  app_router_int1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: app_router_01 }
      subnet_id: { get_resource: web_subnet }	  

  #Provision instances
  web1:
    type: OS::Nova::Server
    properties:
      name: web1
      image: { get_param: web_image }
      flavor: { get_param: flavor }
      networks: {get_resource: web_net}
      pool_id: { get_resource: pool }
	  user_data_format: RAW
      user_data: |
            #!/bin/bash
            echo This is Web Server-01 >> file.txt
            python -m SimpleHTTPServer 80
	member:
		type: OS::Neutron::PoolMember
		properties:
			pool_id: {get_resource: pool}
			address: {get_attr: [web1, first_address]}
			protocol_port: 80

  web2:
    type: OS::Nova::Server
    properties:
      name: web2
      image: { get_param: web_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: web2_port1 }
      user_data_format: RAW
      user_data: |
            #!/bin/bash
            echo This is Web Server-02 >> file.txt
            python -m SimpleHTTPServer 80

  db1:
    type: OS::Nova::Server
    properties:
      name: db1
      image: { get_param: db_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: db1_port0 }
		
  # Create Security Groups
  db_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow sql traffic from web tier
      name: db-security-group
      rules:
        - remote_group_id: { get_resource: web_security_group }
          remote_mode: remote_group_id
          protocol: tcp
          port_range_min: 3306
          port_range_max: 3306
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  web_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow web traffic from anywhere
      name: web-security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
		protocol: icmp
		
  

  # Auto-scaling configuration
  autoscale_group01:
	  type: OS::Heat::AutoScalingGroup
	  properties:
		  min_size: 1
		  min_size: 5
		  resource:
			  type: OS:Nova::Server
			  properties:
				  image: {get_param: web_image}
				  flavor: {get_param: flavor}
				  networks: {get_resource: web_net}
				  pool_id: { get_resource: pool }
				  metadata: {"meterting.stack": {get_param: "OS::stack_id"}}
				  user_data_format: RAW
                  user_data: |
                        #!/bin/bash
                        echo This is an expansion Web Server >> file.txt
                        python -m SimpleHTTPServer 80
			  member:
				  type: OS::Neutron::PoolMember
				  properties:
					  pool_id: {get_resource: pool}
					  address: {get_attr: [webserver, first_address]}
					  protocol_port: 80
  web_scaleup_policy:
	  type: OS::Heat::ScalingPolicy
	  properties:
		  adjustment_type: change_in_capacity
		  auto_scaling_group_id: {get_resource: autoscale_group01}
		  cooldown: 60
		  scaling_adjustment: 1
  web_scaledown_policy:
	  type: OS::Heat::ScalingPolicy
	  properties:
		  adjustment_type: change_in_capacity
		  auto_scaling_group_id: {get_resource: autoscale_group01}
		  cooldown: 60
		  scaling_adjustment: -1
  cpu_alarm_high:
	  type: OS::Ceilometer::Alarm
	  properties:
		  description: Scale-up if the average CPU > 50% for 60 seconds
		  meter_name: cpu_util
		  statistic: avg
		  period: 60
		  evaluation_periods: 1
		  threshold: 50
		  alarm_actions:
			  - {get_attr: [web_scaleup_policy, alarm_url]}
		  matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
		  comparison_operator: gt
  cpu_alarm_low:
	  type: OS::Ceilometer::Alarm
	  properties:
		  description: Scale-down if the average CPU > 15% for 300 seconds
		  meter_name: cpu_util
		  statistic: avg
		  period: 300
		  evaluation_periods: 1
		  threshold: 15
		  alarm_actions:
			  - {get_attr: [web_scaledown_policy, alarm_url]}
		  matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
		  comparison_operator: lt	  

  # Configure the LB'er
  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 10
      max_retries: 3
      timeout: 10

  pool:
    type: OS::Neutron::Pool
    depends_on: app_router_int1
    properties:
      name: mypool
      protocol: HTTP
      monitors: [{get_resource: monitor}]
      subnet_id: { get_resource: web_subnet }
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80

  lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: { get_resource: pool }

  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: external_network_id }
      port_id: { get_attr: [ pool, vip, port_id ] }

outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [web_scaleup_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [web_scaledown_policy, alarm_url]}
  
  pool_ip_address:
    value: {get_attr: [pool, vip, address]}
    description: The IP address of the load balancing pool
  
  WebsiteURL:
    description: URL for WebServerTier
    value:
      str_replace:
        template: http://host/file.txt
        params:
          host: { get_attr: [ lb_floating, floating_ip_address ] }
  
  ceilometer_query:
    value:
      str_replace:
        template: >
          ceilometer statistics -m cpu_util
          -q metadata.user_metadata.stack=stackval -p 600 -a avg
        params:
          stackval: { get_param: "OS::stack_id" }
    description: >
      This is a Ceilometer query for statistics on the cpu_util meter
      Samples about OS::Nova::Server instances in this stack.  The -q
      parameter selects Samples according to the subject's metadata.
      When a VM's metadata includes an item of the form metering.X=Y,
      the corresponding Ceilometer resource has a metadata item of the
      form user_metadata.X=Y and samples about resources so tagged can
      be queried with a Ceilometer query term of the form
      metadata.user_metadata.X=Y.  In this case the nested stacks give
      their VMs metadata that is passed as a nested stack parameter,
      and this stack passes a metadata of the form metering.stack=Y,
      where Y is this stack's ID.
